package com.github.stackscrubs.stuq.backend.controller;

import java.util.List;

import com.github.stackscrubs.stuq.backend.model.Queue;
import com.github.stackscrubs.stuq.backend.model.jpa.Session;
import com.github.stackscrubs.stuq.backend.model.jpa.SubjectId;
import com.github.stackscrubs.stuq.backend.model.jpa.TermId;
import com.github.stackscrubs.stuq.backend.service.QueueService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.http.MediaType;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.media.ArraySchema;

/**
 * QueueController handles requests for the QueueService.
 * 
 * More documentation is generated by Swagger and may be found at @/swagger-ui/index.html
 */
@RestController
@RequestMapping("/queue")
@EnableAutoConfiguration
public class QueueController {
    
    @Autowired
    private QueueService queueService;

    @Operation(summary = "Get all currently active queues")
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully retrieved all queues", 
          content = { @Content(mediaType = "application/json", 
            array = @ArraySchema(schema = @Schema(implementation = Queue.class))) }),
        @ApiResponse(responseCode = "401", description = "Invalid token", content = @Content)
    })
    @GetMapping(value = "", produces = MediaType.APPLICATION_JSON_VALUE)
    public List<Queue> getAll() {
        return this.queueService.getActiveQueues();
    }

    @Operation(summary = "Add a new student from a subject's queue, using the student's token")
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully added student to queue"),
        @ApiResponse(responseCode = "401", description = "Invalid token"),
        @ApiResponse(responseCode = "404", description = "Queue was not found")
    })
    @PostMapping(value = "/add", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void addToQueue(@RequestBody SubjectId subjectId, Authentication authentication) {
        Session session = (Session)authentication.getPrincipal();
        int studentId = session.getUser().getId();

        this.queueService.addStudentToQueue(subjectId.getTerm().getId(), subjectId.getCode(), studentId);
    }

    @Operation(summary = "Removes a student from a queue, using the student's token")
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully removed student from queue"),
        @ApiResponse(responseCode = "401", description = "Invalid token"),
        @ApiResponse(responseCode = "404", description = "Student was not found in any queue")
    })
    @DeleteMapping(value = "/remove")
    public void removeFromQueue(Authentication authentication) {
        Session session = (Session)authentication.getPrincipal();
        int studentId = session.getUser().getId();

        this.queueService.removeStudentFromQueue(studentId);
    }

    @Operation(summary = "Create a new queue for a subject")
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully created queue"),
        @ApiResponse(responseCode = "401", description = "Invalid token"),
        @ApiResponse(responseCode = "404", description = "Subject was not found"),
        @ApiResponse(responseCode = "409", description = "Queue already exists")
    })
    @PostMapping(value = "", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void create(@RequestBody SubjectId subjectId) {
        this.queueService.createBySubject(subjectId.getTerm().getId(), subjectId.getCode());
    }

    @Operation(summary = "Deletes a queue for a subject")
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully deleted queue"),
        @ApiResponse(responseCode = "401", description = "Invalid token"),
        @ApiResponse(responseCode = "404", description = "Subject or queue was not found")
    })
    @DeleteMapping(value = "/{termYear}/{termPeriod}/{code}")
    public void delete(
        @PathVariable int termYear,
        @PathVariable String termPeriod,
        @PathVariable String code
    ) {
        this.queueService.deleteBySubject(new TermId(termYear, termPeriod), code);
    }
}
